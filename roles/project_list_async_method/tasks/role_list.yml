- name: Manage ansible collection within {{ managed_projects_path }} (loop control)
  file:
    state: directory
    path: "{{ project_path }}"
    recurse: yes
  loop: "{{ managed_ansible_collections }}"
  loop_control:
    label: "{{ project_name }}"
  vars:
    collection_name: "{{ item.collection_name }}"
    collection_namespace: "{{ item.collection_namespace }}"
    project_name: "ansible-collection_{{ collection_namespace }}.{{ collection_name }}"
    project_path: "{{ (managed_projects_path, project_name) | path_join }}"
    
- name: Ensure ansible collection clone of remote repo exists locally for
  ansible.builtin.git:
    dest: "{{ project_path }}"
    repo: "{{ git_url }}"
    force: false
    update: false
    version: "{{ version | default(omit, true) }}"
    recursive: false
    depth: "{{ depth | default(omit, true) }}"
    single_branch: "{{ single_branch | default(omit, true) }}"
  loop: "{{ managed_ansible_collections }}"
  loop_control:
    label: "{{ project_name }}"
  vars:
    collection_name: "{{ item.collection_name }}"
    collection_namespace: "{{ item.collection_namespace }}"
    project_name: "ansible-collection_{{ collection_namespace }}.{{ collection_name }}"
    project_path: "{{ (managed_projects_path, project_name) | path_join }}"
    git_url: "{{ item.git_url }}"
  async: 600
  poll: 0
  register: git_clone_async_loop_collections

- name: wait for all git clones to finish
  async_status:
    jid: "{{ item.ansible_job_id }}"
    mode: status
  retries: 20
  delay: 5
  loop: "{{ git_clone_async_loop_collections.results }}"
  register: async_loop_jobs
  until: async_loop_jobs.finished

- name: Purge symlinks from projects
  include_tasks: purge_symlinks.yml
  loop: "{{ managed_ansible_collections }}"
  loop_control:
    label: "{{ project_name }}"
  vars:
    collection_name: "{{ item.collection_name }}"
    collection_namespace: "{{ item.collection_namespace }}"
    project_name: "ansible-collection_{{ collection_namespace }}.{{ collection_name }}"
    project_path: "{{ (managed_projects_path, project_name) | path_join }}"


- name: Ensure collection namespace directory exists
  ansible.builtin.file:
    state: directory
    path: "{{ (collections_path, 'ansible_collections', collection_namespace) | path_join }}"
  loop: "{{ managed_ansible_collections }}"
  loop_control:
    label: "{{ project_name }}"
  vars:
    collections_path: "{{ (ansible_env.HOME, '.ansible', 'collections') | path_join }}"
    collection_subdir: "{{ project.collection_subdir | default('',true) }}"
    depth: "{{ project.depth | default(false, true) }}"
    single_branch: "{{ project.single_branch | default(false, true) }}"
    collection_name: "{{ item.collection_name }}"
    collection_namespace: "{{ item.collection_namespace }}"
    project_name: "ansible-collection_{{ collection_namespace }}.{{ collection_name }}"
    project_path: "{{ (managed_projects_path, project_name) | path_join }}"

- name: Ensure symlink exists between collection project directory and ansible collections path
  ansible.builtin.file:
    path: "{{ collection_path }}"
    state: link
    src: "{{ (project_path, collection_subdir | default(omit)) | path_join }}"
    force: true
  loop: "{{ managed_ansible_collections }}"
  loop_control:
    label: "{{ project_name }}"
  vars:
    collection_name: "{{ item.collection_name }}"
    collection_namespace: "{{ item.collection_namespace }}"
    collections_path: "{{ (ansible_env.HOME, '.ansible', 'collections') | path_join }}"
    collection_subdir: "{{ project.collection_subdir | default('',true) }}"
    depth: "{{ project.depth | default(false, true) }}"
    single_branch: "{{ project.single_branch | default(false, true) }}"
    project_name: "ansible-collection_{{ collection_namespace }}.{{ collection_name }}"
    project_path: "{{ (managed_projects_path, project_name) | path_join }}"
    collection_path: "{{ (collections_path, 'ansible_collections', collection_namespace, collection_name) | path_join }}"